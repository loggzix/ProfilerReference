using UnityEditor;
using UnityEngine;

namespace ProfilerReference
{
    /// <summary>
    /// Script kh·ªüi t·∫°o cho Profiler Reference Tool
    /// ƒê·∫£m b·∫£o tool ho·∫°t ƒë·ªông ƒë√∫ng khi ƒë∆∞·ª£c import v√†o project
    /// </summary>
    [InitializeOnLoad]
    public static class ProfilerReferenceInitializer
    {
        static ProfilerReferenceInitializer()
        {
            // ƒêƒÉng k√Ω callback khi Unity load
            EditorApplication.delayCall += Initialize;
        }

        private static void Initialize()
        {
            // Ki·ªÉm tra v√† t·∫°o c√°c file c·∫ßn thi·∫øt
            ValidateInstallation();

            // Hi·ªÉn th·ªã welcome message l·∫ßn ƒë·∫ßu
            ShowWelcomeMessage();

            // Thi·∫øt l·∫≠p c√°c define symbols n·∫øu c·∫ßn
            SetupDefineSymbols();
        }

        private static void ValidateInstallation()
        {
            var requiredFiles = new[]
            {
                "Assets/ProfilerReference/ProfilerAnalyzer.cs",
                "Assets/ProfilerReference/OptimizationSuggestion.cs",
                "Assets/ProfilerReference/ProfilerReferenceWindow.cs",
                "Assets/ProfilerReference/ProfilerReferenceMenu.cs",
                "Assets/ProfilerReference/ProfilerDataCollector.cs",
                "Assets/ProfilerReference/README.md"
            };

            var missingFiles = new System.Collections.Generic.List<string>();

            foreach (var file in requiredFiles)
            {
                if (!System.IO.File.Exists(file))
                {
                    missingFiles.Add(file);
                }
            }

            if (missingFiles.Count > 0)
            {
                var message = "Profiler Reference Tool - Thi·∫øu files:\n\n";
                foreach (var file in missingFiles)
                {
                    message += $"‚Ä¢ {file}\n";
                }
                message += "\nVui l√≤ng reinstall package ho·∫∑c t·∫°o l·∫°i c√°c files b·ªã thi·∫øu.";

                Debug.LogError(message);
                EditorUtility.DisplayDialog("Profiler Reference - L·ªói c√†i ƒë·∫∑t", message, "OK");
            }
            else
            {
                Debug.Log("‚úÖ Profiler Reference Tool ƒë√£ ƒë∆∞·ª£c c√†i ƒë·∫∑t th√†nh c√¥ng");
            }
        }

        private static void ShowWelcomeMessage()
        {
            const string WelcomeKey = "ProfilerReference_WelcomeShown";
            if (EditorPrefs.GetBool(WelcomeKey, false)) return;

            var message = "üéâ Ch√†o m·ª´ng ƒë·∫øn v·ªõi Profiler Reference Tool!\n\n" +
                         "C√¥ng c·ª• n√†y s·∫Ω gi√∫p b·∫°n:\n" +
                         "‚Ä¢ Ph√¢n t√≠ch performance c·ªßa Unity project\n" +
                         "‚Ä¢ Ph√°t hi·ªán function/script c·∫ßn t·ªëi ∆∞u\n" +
                         "‚Ä¢ G·ª£i √Ω c√°ch t·ªëi ∆∞u chi ti·∫øt\n\n" +
                         "ƒê·ªÉ b·∫Øt ƒë·∫ßu: Tools > Profiler Reference > Open Tool";

            EditorUtility.DisplayDialog("Profiler Reference Tool", message, "B·∫Øt ƒë·∫ßu", "ƒê·ªÉ sau");

            EditorPrefs.SetBool(WelcomeKey, true);
        }

        private static void SetupDefineSymbols()
        {
            // L·∫•y define symbols cho t·∫•t c·∫£ platforms
            var defines = PlayerSettings.GetScriptingDefineSymbolsForGroup(BuildTargetGroup.Standalone);

            const string DefineSymbol = "PROFILER_REFERENCE";

            if (!defines.Contains(DefineSymbol))
            {
                defines += ";" + DefineSymbol;
                PlayerSettings.SetScriptingDefineSymbolsForGroup(BuildTargetGroup.Standalone, defines);
                Debug.Log("‚úÖ ƒê√£ th√™m define symbol: PROFILER_REFERENCE");
            }
        }

        /// <summary>
        /// Reset welcome message (for testing)
        /// </summary>
        [MenuItem("Tools/Profiler Reference/Reset Welcome Message", false, 22)]
        private static void ResetWelcomeMessage()
        {
            EditorPrefs.DeleteKey("ProfilerReference_WelcomeShown");
            Debug.Log("ƒê√£ reset welcome message");
        }

        /// <summary>
        /// Validate installation manually
        /// </summary>
        [MenuItem("Tools/Profiler Reference/Validate Installation", false, 23)]
        private static void ManualValidateInstallation()
        {
            ValidateInstallation();
        }
    }
}
