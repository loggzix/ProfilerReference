using UnityEngine;
using UnityEngine.SceneManagement;

namespace ProfilerReference.Demo
{
    /// <summary>
    /// Script qu·∫£n l√Ω demo scene cho Profiler Reference Tool
    /// </summary>
    public class ProfilerReferenceDemoScene : MonoBehaviour
    {
        [Header("Demo Objects")]
        public GameObject performanceTestObject;
        public GameObject dataCollectorObject;

        [Header("Demo Settings")]
        public bool enableDemoMode = true;
        public float demoDuration = 30f;

        private float _startTime;
        private bool _demoRunning = false;

        private void Start()
        {
            if (enableDemoMode)
            {
                StartDemo();
            }
        }

        private void Update()
        {
            if (_demoRunning && Time.time - _startTime >= demoDuration)
            {
                EndDemo();
            }
        }

        /// <summary>
        /// B·∫Øt ƒë·∫ßu demo
        /// </summary>
        public void StartDemo()
        {
            _demoRunning = true;
            _startTime = Time.time;

            // ƒê·∫£m b·∫£o c√°c components ƒë∆∞·ª£c setup
            SetupDemoObjects();

            Debug.Log("üöÄ B·∫Øt ƒë·∫ßu Profiler Reference Demo");
            Debug.Log($"Demo s·∫Ω ch·∫°y trong {demoDuration} gi√¢y");
            Debug.Log("M·ªü Profiler Reference Tool (Tools > Profiler Reference > Open Tool) ƒë·ªÉ xem k·∫øt qu·∫£");
        }

        /// <summary>
        /// K·∫øt th√∫c demo
        /// </summary>
        public void EndDemo()
        {
            _demoRunning = false;

            Debug.Log("‚úÖ K·∫øt th√∫c Profiler Reference Demo");
            Debug.Log("Ki·ªÉm tra Profiler Reference Tool ƒë·ªÉ xem k·∫øt qu·∫£ ph√¢n t√≠ch!");
        }

        /// <summary>
        /// Setup c√°c objects cho demo
        /// </summary>
        private void SetupDemoObjects()
        {
            // T·∫°o performance test object n·∫øu ch∆∞a c√≥
            if (performanceTestObject == null)
            {
                performanceTestObject = new GameObject("PerformanceTestObject");
                var performanceScript = performanceTestObject.AddComponent<ExamplePerformanceScript>();
                performanceScript.enableInefficientCode = true;
                performanceScript.objectCount = 500; // Gi·∫£m s·ªë l∆∞·ª£ng ƒë·ªÉ tr√°nh crash
            }

            // T·∫°o data collector object n·∫øu ch∆∞a c√≥
            if (dataCollectorObject == null)
            {
                dataCollectorObject = new GameObject("DataCollector");
                var collector = dataCollectorObject.AddComponent<ProfilerDataCollector>();
                collector.autoStart = true;
                collector.collectionInterval = 0.5f;
                collector.maxCollectionTime = demoDuration;
            }

            // ƒê·∫£m b·∫£o Profiler ƒë∆∞·ª£c b·∫≠t
            UnityEngine.Profiling.Profiler.enabled = true;

            Debug.Log("üìä ƒê√£ setup demo objects");
        }

        private void OnGUI()
        {
            if (!_demoRunning) return;

            // Hi·ªÉn th·ªã th√¥ng tin demo
            GUI.Label(new Rect(10, 10, 400, 20), $"üöÄ Profiler Reference Demo - Th·ªùi gian: {Time.time - _startTime:F1}s / {demoDuration:F1}s");

            if (GUI.Button(new Rect(10, 35, 150, 30), "D·ª´ng Demo"))
            {
                EndDemo();
            }

            if (GUI.Button(new Rect(170, 35, 150, 30), "M·ªü Tool"))
            {
                // M·ªü Profiler Reference Tool
                var windowType = System.Type.GetType("ProfilerReference.ProfilerReferenceWindow, Assembly-CSharp-Editor");
                if (windowType != null)
                {
                    var method = windowType.GetMethod("ShowWindow", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static);
                    if (method != null)
                    {
                        method.Invoke(null, null);
                    }
                }
            }
        }

        #region Context Menu Items

        [ContextMenu("Start Demo")]
        private void ContextStartDemo()
        {
            StartDemo();
        }

        [ContextMenu("End Demo")]
        private void ContextEndDemo()
        {
            EndDemo();
        }

        [ContextMenu("Setup Demo Objects")]
        private void ContextSetupDemoObjects()
        {
            SetupDemoObjects();
        }

        #endregion
    }
}
