using System;

namespace ProfilerReference
{
    /// <summary>
    /// Lo·∫°i g·ª£i √Ω t·ªëi ∆∞u
    /// </summary>
    public enum SuggestionType
    {
        Performance,
        Memory,
        General
    }

    /// <summary>
    /// M·ª©c ƒë·ªô nghi√™m tr·ªçng c·ªßa v·∫•n ƒë·ªÅ
    /// </summary>
    public enum SuggestionSeverity
    {
        Low,
        Medium,
        High,
        Critical
    }

    /// <summary>
    /// G·ª£i √Ω t·ªëi ∆∞u h√≥a cho function/script
    /// </summary>
    [Serializable]
    public class OptimizationSuggestion
    {
        /// <summary>
        /// Lo·∫°i g·ª£i √Ω
        /// </summary>
        public SuggestionType Type { get; set; }

        /// <summary>
        /// T√™n function c·∫ßn t·ªëi ∆∞u
        /// </summary>
        public string FunctionName { get; set; }

        /// <summary>
        /// T√™n script ch·ª©a function
        /// </summary>
        public string ScriptName { get; set; }

        /// <summary>
        /// M·ª©c ƒë·ªô nghi√™m tr·ªçng
        /// </summary>
        public SuggestionSeverity Severity { get; set; }

        /// <summary>
        /// M√¥ t·∫£ v·∫•n ƒë·ªÅ
        /// </summary>
        public string Description { get; set; }

        /// <summary>
        /// Chi ti·∫øt g·ª£i √Ω t·ªëi ∆∞u
        /// </summary>
        public string SuggestionText { get; set; }

        /// <summary>
        /// Th·ªùi gian t·∫°o g·ª£i √Ω
        /// </summary>
        public DateTime CreatedTime { get; set; } = DateTime.Now;

        /// <summary>
        /// L·∫•y m√†u s·∫Øc cho severity level
        /// </summary>
        public string GetSeverityColor()
        {
            switch (Severity)
            {
                case SuggestionSeverity.Low:
                    return "#00FF00"; // Green
                case SuggestionSeverity.Medium:
                    return "#FFFF00"; // Yellow
                case SuggestionSeverity.High:
                    return "#FF8000"; // Orange
                case SuggestionSeverity.Critical:
                    return "#FF0000"; // Red
                default:
                    return "#FFFFFF"; // White
            }
        }

        /// <summary>
        /// L·∫•y icon cho suggestion type
        /// </summary>
        public string GetTypeIcon()
        {
            switch (Type)
            {
                case SuggestionType.Performance:
                    return "‚è±Ô∏è";
                case SuggestionType.Memory:
                    return "üíæ";
                case SuggestionType.General:
                    return "‚öôÔ∏è";
                default:
                    return "‚ùì";
            }
        }

        /// <summary>
        /// L·∫•y ti√™u ƒë·ªÅ hi·ªÉn th·ªã
        /// </summary>
        public string GetDisplayTitle()
        {
            return $"{GetTypeIcon()} {FunctionName} ({ScriptName})";
        }

        /// <summary>
        /// Ki·ªÉm tra xem suggestion c√≥ h·ª£p l·ªá kh√¥ng
        /// </summary>
        public bool IsValid()
        {
            return !string.IsNullOrEmpty(FunctionName) &&
                   !string.IsNullOrEmpty(ScriptName) &&
                   !string.IsNullOrEmpty(Description);
        }
    }
}
